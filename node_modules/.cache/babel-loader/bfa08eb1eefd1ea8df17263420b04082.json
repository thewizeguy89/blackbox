{"ast":null,"code":"var _jsxFileName = \"/Users/timothydavidson/Documents/Solidity/blackbox/src/components/App.js\";\n//import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. Please try MetaMask');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    console.log(web3); //Load account\n    //Network ID\n    //IF got connection, get data from contracts\n    //Assign contract\n    //Get files amount\n    //Load files&sort by the newest\n    //Else\n    //alert Error\n  } // Get file from user\n\n\n  //Set states\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {};\n\n    this.uploadFile = description => {//Add file to the IPFS\n      //Check If error\n      //Return error\n      //Set state to loading\n      //Assign value for the file without extension\n      //Call smart contract uploadFile function \n    };\n\n    this.state = {}; //Bind functions\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 59\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Main, {\n        files: this.state.files,\n        captureFile: this.captureFile,\n        uploadFile: this.uploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/timothydavidson/Documents/Solidity/blackbox/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","console","log","constructor","props","captureFile","event","uploadFile","description","state","render","account","loading","files"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP,C,CAEA;;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAEF,QAAlBK,kBAAkB,GAAG;AACzB,UAAM,KAAKC,QAAL,EAAN;AACA,UAAM,KAAKC,kBAAL,EAAN;AACD;;AAEa,QAARD,QAAQ,GAAG;AACf,QAAIE,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACD,KAHD,MAIK,IAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,KAFI,MAGA;AACHJ,MAAAA,MAAM,CAACK,KAAP,CAAa,oDAAb;AACD;AACF;;AAEuB,QAAlBN,kBAAkB,GAAG;AACzB,UAAMG,IAAI,GAAGF,MAAM,CAACE,IAApB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAFyB,CAGzB;AAEA;AAEA;AACE;AAEA;AAEA;AAEF;AACE;AAEH,GArCyB,CAuC1B;;;AAqBA;AACAM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SArBnBC,WAqBmB,GArBLC,KAAK,IAAI,CACtB,CAoBkB;;AAAA,SAhBnBC,UAgBmB,GAhBNC,WAAW,IAAI,CAE1B;AAEE;AACE;AAEF;AAEA;AAEA;AAEH,KAGkB;;AAEjB,SAAKC,KAAL,GAAa,EAAb,CAFiB,CAKjB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE;AAA5B;AAAA;AAAA;AAAA;AAAA,cADF,EAEI,KAAKF,KAAL,CAAWG,OAAX,gBACE;AAAK,QAAA,EAAE,EAAC,QAAR;AAAiB,QAAA,SAAS,EAAC,kBAA3B;AAAA,+BAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9C;AAAA;AAAA;AAAA;AAAA,cADF,gBAEE,QAAC,IAAD;AACE,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWI,KADpB;AAEE,QAAA,WAAW,EAAE,KAAKR,WAFpB;AAGE,QAAA,UAAU,EAAE,KAAKE;AAHnB;AAAA;AAAA;AAAA;AAAA,cAJN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAnFyB;;AAsF5B,eAAehB,GAAf","sourcesContent":["//import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. Please try MetaMask')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    console.log(web3)\n    //Load account\n\n    //Network ID\n\n    //IF got connection, get data from contracts\n      //Assign contract\n\n      //Get files amount\n\n      //Load files&sort by the newest\n\n    //Else\n      //alert Error\n\n  }\n\n  // Get file from user\n  captureFile = event => {\n  }\n\n\n  //Upload File\n  uploadFile = description => {\n\n    //Add file to the IPFS\n\n      //Check If error\n        //Return error\n\n      //Set state to loading\n\n      //Assign value for the file without extension\n\n      //Call smart contract uploadFile function \n\n  }\n\n  //Set states\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}