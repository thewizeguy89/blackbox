{"ast":null,"code":"var _jsxFileName = \"/Users/timothydavidson/Documents/Solidity/blackbox/src/components/App.js\";\nimport Blackbox from '../abis/Blackbox.json';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient.create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    }); // Network ID\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = Blackbox.networks[networkId];\n\n    if (networkData) {\n      // Assign contract\n      const blackbox = new web3.eth.Contract(Blackbox.abi, networkData.address);\n      this.setState({\n        blackbox\n      }); // Get files amount\n\n      const filesCount = await blackbox.methods.fileCount().call();\n      this.setState({\n        filesCount\n      }); // Load files&sort by the newest\n\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await blackbox.methods.files(i).call();\n        this.setState({\n          files: [...this.state.files, file]\n        });\n      }\n    } else {\n      window.alert('Blackbox contract not deployed to detected network.');\n    }\n  } // Get file from user\n\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result),\n          type: file.type,\n          name: file.name\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadFile = description => {\n      console.log(\"Submitting file to IPFS...\"); // Add file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('IPFS result', result.size);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        }); // Assign value for the file without extension\n\n        if (this.state.type === '') {\n          this.setState({\n            type: 'none'\n          });\n        }\n\n        this.state.blackbox.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null\n          });\n          window.location.reload();\n        }).on('error', e => {\n          window.alert('Error');\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.state = {\n      account: '',\n      blackbox: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 59\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Main, {\n        files: this.state.files,\n        captureFile: this.captureFile,\n        uploadFile: this.uploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/timothydavidson/Documents/Solidity/blackbox/src/components/App.js"],"names":["Blackbox","React","Component","Navbar","Main","Web3","ipfsClient","require","ipfs","create","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","accounts","eth","getAccounts","setState","account","networkId","net","getId","networkData","networks","blackbox","Contract","abi","address","filesCount","methods","fileCount","call","i","file","files","state","constructor","props","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","type","name","console","log","uploadFile","description","add","error","size","loading","hash","send","from","on","location","reload","e","bind","render"],"mappings":"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","sourcesContent":["import Blackbox from '../abis/Blackbox.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient.create({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }); // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Blackbox.networks[networkId]\n    if(networkData) {\n      // Assign contract\n      const blackbox = new web3.eth.Contract(Blackbox.abi, networkData.address)\n      this.setState({ blackbox })\n      // Get files amount\n      const filesCount = await blackbox.methods.fileCount().call()\n      this.setState({ filesCount })\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await blackbox.methods.files(i).call()\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    } else {\n      window.alert('Blackbox contract not deployed to detected network.')\n    }\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadFile = description => {\n    console.log(\"Submitting file to IPFS...\")\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('IPFS result', result.size)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      // Assign value for the file without extension\n      if(this.state.type === ''){\n        this.setState({type: 'none'})\n      }\n      this.state.blackbox.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n         loading: false,\n         type: null,\n         name: null\n       })\n       window.location.reload()\n      }).on('error', (e) =>{\n        window.alert('Error')\n        this.setState({loading: false})\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      blackbox: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }\n    this.uploadFile = this.uploadFile.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}